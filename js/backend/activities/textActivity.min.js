function $(e){return document.getElementById(e)}function q(e){return document.querySelector(e)}function hideAfterDelay(e,t){null!=window.prevTimeOut&&(clearTimeout(prevTimeOut),window.prevTimeOut=null),window.prevTimeOut=setTimeout(()=>{e.classList.add("hidden"),window.prevTimeOut=null},t)}function showSnackbar(e,t=5e3){const n=q(".mdc-snackbar").MDCSnackbar;n.labelText=e,n.timeoutMs=t,n.open()}async function onStart(){console.log("<textCrypto> Started activity text");let e=null,t=null;q(".mdc-tab-bar").MDCTabBar.listen("MDCTabBar:activated",function(e){console.debug(`<textCrypto:TabBar> Tab selected: ${e.detail.index}`);const t=$("encryptContent"),n=$("decryptContent");switch(e.detail.index){case 0:console.debug("<textCrypto:TabBar> Content: Encrypt"),t.classList.remove("hidden"),t.classList.remove("contentSwitcher-outLeft"),n.classList.add("contentSwitcher-outRight"),hideAfterDelay(n,250);break;case 1:console.debug("<textCrypto:TabBar> Content: Decrypt"),n.classList.remove("hidden"),t.classList.add("contentSwitcher-outLeft"),n.classList.remove("contentSwitcher-outRight"),hideAfterDelay(t,250);break;default:console.error("<textCrypto:TabBar> Unknown tab selected!")}}),$("enc-open-keyfile").onclick=(async()=>{window.fileOps.fileOpen("Select AES Keyfile","Select Keyfile",["openFile"],[{name:"AES Keyfiles",extensions:["aKey"]}]).then(t=>{t.canceled||(console.log(`<textCrypto> Selected one keyfile: ${t.filePaths}`),e=t.filePaths[0],$("enc-selected-key").textContent=`Currently selected keyfile: '${e.replace(/^.*\//gm,"")}'`)})}),$("dec-open-keyfile").onclick=(async()=>{window.fileOps.fileOpen("Select AES Keyfile","Select Keyfile",["openFile"],[{name:"AES Keyfiles",extensions:["aKey"]}]).then(e=>{e.canceled||(console.log(`<textCrypto> Selected one keyfile: ${e.filePaths}`),t=e.filePaths[0],$("dec-selected-key").textContent=`Currently selected keyfile: '${t.replace(/^.*\//gm,"")}'`)})});const n=(t,n=!1)=>{0!==t.length?null!=e?window.aesCrypto.encrypt(t,e).then(e=>{const t=$("encrypted-output");if(null!=e.err)return console.warn(`<aesCrypto:encrypt> Error encrypting text: \n\n${e.err}`),showSnackbar("Failed to encrypt text. Check if keyfiles are valid."),void(t.innerHTML="<i>Encryption failure</i>");t.textContent=e.cipher+e.iv}):n||showSnackbar("No keyfile selected. Select one above or generate a new one."):n||showSnackbar("Text to encrypt is blank")},o=$("startEnc");o.onclick=(()=>{const e=$("text-to-enc").MDCTextField.value.trim();n(e)}),$("startDec").onclick=(()=>{const e=$("cipher-text").MDCTextField.value.trim();0!==e.length?null!=t?window.aesCrypto.decrypt(e.slice(0,-24),e.slice(-24),t).then(e=>{const t=$("decrypted-output");if(null!=e.err)return console.warn(`<aesCrypto:decrypt> Error decrypting text: \n\n${e.err}`),showSnackbar("Failed to decrypt text. Check if keyfiles are valid and were also used to encrypt the text."),void(t.innerHTML="<i>Decryption failure</i>");t.textContent=e.text}):showSnackbar("No keyfile selected."):showSnackbar("Text to decrypt is blank")}),document.querySelectorAll(".output-area").forEach(e=>{e.onclick=(e=>{console.debug("<textCrypto:outputArea@click> Copied text:",e.target.textContent.trim().slice(0,10),"..."),window.navigator.clipboard.writeText(e.target.textContent.trim()),showSnackbar("Copied text to clipboard")})});const c=$("inst-enc");let l="";c.onchange=(()=>{if(c.checked){o.disabled=!0;const e=$("text-to-enc").MDCTextField;n(e.value.trim(),!0),q("#text-to-enc textarea").oninput=(()=>{const t=$("text-to-enc").MDCTextField.value.trim();t!==l&&(n(e.value.trim(),!0),l=t)})}else o.disabled=!1,q("#text-to-enc textarea").oninput=null})}function onStop(){console.debug("<textCrypto> Deleting global vars..."),delete window.prevTimeOut,console.log("<textCrypto> Stopped activity text")}window.prevTimeOut=null;