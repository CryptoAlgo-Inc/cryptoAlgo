import{html,render}from"../lit-html/lit-html.js";const $textID="text";const $fileID="file";const $keyGenID="keygen";const $RSA_ID="RSA";let prevTabID=null;const minimise=function(){window.winCtl.min()};const maximise=function(){window.winCtl.max()};const close=function(){window.winCtl.close()};const keyGenInflate=function(){renderTab(keyGen,$keyGenID,"Keyfile generation")};const textInflate=function(){renderTab(text,$textID,"Text cryptography")};const fileInflate=function(){renderTab(file,$fileID,"File cryptography")};const RSAInflate=function(){renderTab(RSA,$RSA_ID,"RSA cryptography")};const $=id=>document.getElementById(id);const q=selector=>document.querySelector(selector);const store=(key,data)=>localStorage.setItem(key,data);const get=key=>localStorage.getItem(key);const clrActive=()=>{document.querySelectorAll(".titleBar .titleTabs button").forEach(element=>{element.classList.remove("active")})};const renderTab=(tabRenderer,tabID,longName)=>{if(tabID===prevTabID)return;if(typeof onStop==="function"){console.debug(`<renderTab> Stopping activity ${prevTabID}`);onStop()}q(".titleBar .windowTitle small").textContent=longName;render(tabRenderer(),$("main"));window.mdc.autoInit();store("lastTab",tabID);clrActive();console.debug(`<renderTab> Loading activity ${tabID}`);loadJS(`js/backend/${tabID}Activity.min.js`,function(){onStart().then(()=>{console.debug(`<renderTab> Loaded activity ${tabID}`)}).catch(e=>{console.debug(`<renderTab> Activity onStart threw an exception:\n\n ${e}`)})}).catch(e=>{console.debug(`<renderTab> Failed to fetch and execute activity JS script for activity ${tabID} with error:\n\n${e}`)});prevTabID=tabID;$(tabID).classList.add("active")};const loadJS=async(src,callback=function(){console.debug(`Loaded script '${src}`)})=>{const script=document.createElement("script");script.onload=callback;script.src=src;try{document.head.appendChild(script)}catch(e){console.error(`Failed to fetch script '${src}' with error: \n\n${e}`)}};const page=()=>html`
    <div class="titleBar">
        <div class="buttonHolder">
            <button aria-label="Close" class="close" @click=${close}></button>
            <button aria-label="Minimise" class="minimise" @click=${minimise}></button>
            <button aria-label="Maximise" class="maximise" @click=${maximise}></button>
        </div>
        <div class="windowTitle">
            <p>CryptoAlgo</p>
            <small>Loading...</small>
        </div>
        <div class="titleTabs">
            <button @click=${keyGenInflate} id="${$keyGenID}">Keys</button>
            <button @click=${textInflate} id="${$textID}">Text</button>
            <button @click=${fileInflate} id="${$fileID}">File</button>
            <button @click=${RSAInflate} id="${$RSA_ID}">RSA</button>
        </div>
        <div class="titleActions">
            
        </div>
    </div>
    <div class="content">
        <main id="main">
        </main>
    </div>
`;const keyGen=()=>html`
    <div class="mount">
        <h2>AES/RSA Key Generation</h2>
        <small class="mdc-typography--body2">
            Keyfiles are like keys for your data. Keep your keyfiles in a secure location, and treat them like keys.
            If you lose them, any data encrypted with them will be permanently lost.
        </small>
        <!------>
        <div>
            <button class="mdc-button" data-mdc-auto-init="MDCRipple" style="margin:4px">
                <div class="mdc-button__ripple"></div>
                <i class="material-icons mdc-button__icon" aria-hidden="true">help</i>
                <span class="mdc-button__label">Learn more about AES keyfiles</span>
            </button>
            <button class="mdc-button" data-mdc-auto-init="MDCRipple" style="margin:4px">
                <div class="mdc-button__ripple"></div>
                <i class="material-icons mdc-button__icon" aria-hidden="true">help</i>
                <span class="mdc-button__label">Learn more about RSA keypairs</span>
            </button>
        </div>
        <!------>
        <hr>
        <!------>
        <div class="inner">
            <p class="mdc-typography--body1">
                Just starting, or don't know what to do? 
                Click the button below to generate all required keyfiles in one step, quickly and easily.
            </p>
            <button class="mdc-button mdc-button--raised" data-mdc-auto-init="MDCRipple">
                <div class="mdc-button__ripple"></div>
                <i class="material-icons mdc-button__icon">vpn_key</i>
                <span class="mdc-button__label">Generate all keyfiles</span>
            </button>
            <!------>
            <h3>Advanced Options</h3>
            <small class="mdc-typography--body2">
                Use these functions if you want to regenerate one keyfile, or have other special requirements.
            </small>
            <hr>
            <p class="mdc-typography--body1">
                Only generate a AES keyfile
            </p>
            <button class="mdc-button mdc-button--outlined" data-mdc-auto-init="MDCRipple">
                <div class="mdc-button__ripple"></div>
                <span class="mdc-button__label">Generate AES keyfile</span>
            </button>
            <p class="mdc-typography--body1">
                Only generate a RSA keypair
            </p>
            <button class="mdc-button mdc-button--outlined" data-mdc-auto-init="MDCRipple">
                <div class="mdc-button__ripple"></div>
                <span class="mdc-button__label">Generate RSA keypair</span>
            </button>
        </div>

    </div>
`;const text=()=>html`
    <div class="mount">
        <h2>Text Encryption/Decryption</h2>
        <div class="step step-1">
            
        </div>
        <div class="step step-2">
            
        </div>
    </div>
`;const file=()=>html`
    <div class="mount">
        <h2>File Encryption/Decryption</h2>
    </div>
`;const RSA=()=>html`
    <div class="mount">
        <h2>Encrypt/Decrypt AES Keyfiles With RSA</h2>
    </div>
`;render(page(),document.body);document.title="CryptoAlgo";const lastTab=get("lastTab");switch(lastTab){case $textID:textInflate();break;case $fileID:fileInflate();break;case $RSA_ID:RSAInflate();break;case $keyGenID:keyGenInflate();break;default:keyGenInflate()}